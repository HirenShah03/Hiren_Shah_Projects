/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.User;

import Business.EcoSystem;
import Business.Rating.UserRating;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Conversation;
import Business.WorkQueue.IssueWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Madhuja
 */
public class ManageRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount ua;
    
    public ManageRequestsJPanel(JPanel userProcessContainer, UserAccount ua, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.ua = ua;
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblIRQueue.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest wr : ua.getWorkQueue().getWorkRequestList()){
            if(!wr.getStatus().equalsIgnoreCase("Completed")){
                Object row[] = new Object[dtm.getColumnCount()];
                row[0] = wr;
                row[1] = wr.getTitle();
                row[2] = wr.getStatus();
                dtm.addRow(row);
            }
        }
    }
    
    public void populateConversation(WorkRequest wr){
        DefaultTableModel dtm = (DefaultTableModel)tblConversation.getModel();
        dtm.setRowCount(0);
        
        for(Conversation c : wr.getConversation()){
            Object row[] = new Object[dtm.getColumnCount()];
            row[0] = c.getUa();
            row[1] = c.getMsg();
            dtm.addRow(row);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIRQueue = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnRR = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblConversation = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMsg = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btnCompleteRequest = new javax.swing.JButton();
        btnBack1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Issue Request Queue");

        tblIRQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IR Number", "Title", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblIRQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblIRQueueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblIRQueue);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnRR.setText("Raise a New Request");
        btnRR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRRActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setText("Request Conversation");

        tblConversation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConversation.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(tblConversation);
        tblConversation.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        txtMsg.setColumns(20);
        txtMsg.setRows(5);
        txtMsg.setEnabled(false);
        txtMsg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMsgKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtMsg);

        jLabel3.setText("Reply Message");

        btnCompleteRequest.setText("Complete Request");
        btnCompleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteRequestActionPerformed(evt);
            }
        });

        btnBack1.setBackground(new java.awt.Color(0, 153, 153));
        btnBack1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnBack1.setForeground(new java.awt.Color(255, 255, 255));
        btnBack1.setText("<<");
        btnBack1.setMaximumSize(new java.awt.Dimension(200, 200));
        btnBack1.setMinimumSize(new java.awt.Dimension(200, 200));
        btnBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRefresh))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCompleteRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(btnRR, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRR)
                    .addComponent(btnCompleteRequest))
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(btnBack1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRRActionPerformed
        // TODO add your handling code here:
        RaiseRequestJPanel panel = new RaiseRequestJPanel(userProcessContainer, ua, system);
        userProcessContainer.add("RaiseRequestJPanel",panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_btnRRActionPerformed

    private void tblIRQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblIRQueueMouseClicked
        // TODO add your handling code here:
        WorkRequest wr = (WorkRequest) tblIRQueue.getValueAt(tblIRQueue.getSelectedRow(), 0);
        if(wr.getStatus().equalsIgnoreCase("Completed")){
            txtMsg.setEnabled(false);
        }else{
            txtMsg.setEnabled(true);
        }
        populateConversation(wr);
    }//GEN-LAST:event_tblIRQueueMouseClicked

    private void txtMsgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMsgKeyPressed
        // TODO add your handling code here:
        
        int key = evt.getKeyCode();
        if (key == evt.VK_ENTER) {
            if(txtMsg.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please enter the message first!","Warning",JOptionPane.WARNING_MESSAGE);
            }else{
                WorkRequest wr = (WorkRequest) tblIRQueue.getValueAt(tblIRQueue.getSelectedRow(), 0);
                Conversation c = new Conversation();
                c.setMsg(txtMsg.getText());
                c.setUa(ua);
                wr.getConversation().add(c);
                wr.setStatus("Message Sent to the Doctor");
                JOptionPane.showMessageDialog(null, "Message has been sent back to the Doctor!");
                populateTable();
                populateConversation(wr);
                txtMsg.setText("");
            }
        }
    }//GEN-LAST:event_txtMsgKeyPressed

    private void btnCompleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblIRQueue.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Issue Request for Completion!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkRequest wr = (WorkRequest) tblIRQueue.getValueAt(tblIRQueue.getSelectedRow(), 0);
        if(wr.getStatus().equalsIgnoreCase("Completed")){
            JOptionPane.showMessageDialog(null, "The issue request has already been completed!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        popupRatingMsg((IssueWorkRequest) wr);
        
       
        populateTable();
        txtMsg.setEnabled(false);
    }//GEN-LAST:event_btnCompleteRequestActionPerformed

    private void btnBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack1ActionPerformed
        // TODO add your handling code here:
                userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBack1ActionPerformed

    public void popupRatingMsg(IssueWorkRequest wr){
        JPanel panel = new JPanel();
        wr.updateRatingDoctorList();
        panel.add(new JLabel("Hope your issue was resolved as soon as possible!"));
        panel.add(new JLabel("Please rate the below Doctors who helped you before completeing the request!"));
        int i =0;
        JSpinner spinnerRating[] = new JSpinner[wr.getRating().size()];
        for(UserRating r : wr.getRating()){
            panel.add(new JLabel(r.getDoctor().getEmployee().getName()));
            spinnerRating[i] = new JSpinner();
            panel.add(spinnerRating[i++]);
        }
        
        int result = JOptionPane.showConfirmDialog(null, panel, "Rating", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        i = 0;
        if(result == JOptionPane.OK_OPTION){
            wr.setStatus("Completed");
            for(UserRating r : wr.getRating()){
                r.setRating((int) spinnerRating[i++].getValue());
                double newRating = ((r.getDoctor().getRating()*r.getDoctor().getRatedUserCount())+r.getRating());
                r.getDoctor().setRatedUserCount(r.getDoctor().getRatedUserCount()+1);
                r.getDoctor().setRating(newRating/r.getDoctor().getRatedUserCount());
                System.out.println(r.getDoctor().getRating());
            }
            JOptionPane.showMessageDialog(null, "Issue Request "+wr.getId()+" has been completed Successfully!");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack1;
    private javax.swing.JButton btnCompleteRequest;
    private javax.swing.JButton btnRR;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblConversation;
    private javax.swing.JTable tblIRQueue;
    private javax.swing.JTextArea txtMsg;
    // End of variables declaration//GEN-END:variables
}
